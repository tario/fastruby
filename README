= Fastruby - fast execution of ruby code

Fastruby is a gem which allows to execute ruby code faster than normal (about 100X of the MRI1.8)

Fastruby IS NOT a separated ruby interpreter. Then, the design is simple

== Installation

The install is as simple as execute the well-known gem install:

sudo gem install fastruby

== Documentation

Since this first version of fastruby is in part an spike/PoC, there is no stable API to document. 
So, I recommend not to develop other software on top of fastruby since its API could change in any moment. 
But I will try as much as possible keep the backward compatibility in the near future

I will stabilize the API and document it for next releases. I promise

== Usage

The basic method is fastruby, fastruby takes a string with ruby code and compile it

There is a few known limitations:
  * fastruby can't take more than one method
  * fastruby only can be called from inside a class scope, and only can be used to define instance methods (no class methods)

=== Example 1: How invoke fastruby

  require "fastruby"
  
  class X
    fastruby '
    def foo
      print "hello world\n"
    end
    '
  end
  
  X.new.foo
  
=== Example 2: Prebuild

Normally, the method is built at runtime when is called with a new signature, You can prebuild the method to prevent this when the method is called for first time

  require "fastruby"
  
  class X
    fastruby '
    def foo(a,b)
      a+b
    end
    '
  end
  
  X.build([X,String,String] , :foo)
  
  p X.new.foo("fast", "ruby") # will use the prebuilded method
  p X.new.foo(["fast"], ["ruby"]) # will build foo for X,Array,Array signature and then execute it

=== Example 3: Explicit inference

Current fastruby allows to explictly define a type for a expression, a basic example show as tell to fastruby to assume that the result of to_s is of type String in the following case:

  require "fastruby"
  
  class X
    fastruby '
    def foo(a)
      a.to_s.infer(String) + "_"
    end
    '
  end
  
  p X.new.foo(9) 

When fastruby can infer the type of an expression, the method calls that involve that expression can be accelerated. This is not necessary for arguments passed to a method or block


== Copying

Copyright (c) 2010-2011 Dario Seminara, released under the GPL License (see LICENSE)
