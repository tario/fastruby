0.0.18  Optimize of exising methods using "optimize" (only pure ruby methods are supported)  

    Implemented new cache by syntax tree, more accurate, fixing a few cache bugs and compatible with inlining

    Removed all cache by code string, buggy by design

    performance: Implemented inlining of method calls (not iter call supported, splat calls nor inline of methods with iter calls)  

    Internal refactor: Changed C translator to use chain of responsability (define_method_handler dependency on Rakefile)

0.0.17  Fixed bug of non-volatile variables on scopes calling setjmp

    Fixed bug of native pointers encoding on 32 bits systems

    peforrmance: implemented linear stack scopes when possible

		performance: refactored C translation to avoid unecessary non-local jumps such return

		performance: refactored C translation to avoid unecessary anonymous C functions

		performance: Implemented direct call to CFUNC methods on ruby1.9

		Added support for single methods (with "no class")

		Fixed bug with default argument initialization and redo

0.0.16	Limited (see known issues on README) support for ruby1.9-p180 (tested with rvm)

		Support for ruby1.8-p334 (tested with rvm)

0.0.15	Support for continuation objects and callcc

		Fixed fastruby protocol to support unlimited number of arguments from ruby

		Support for default arguments (e.g. def foo(a, b=c.to_s, c=99) )

		Minor fixes to splat arguments on blocks

		Support for receving block as proc (i.e. def foo(&block); end)

		Support for passing proc as block (i.e. foo(&block))
 
0.0.14	Support for method replacement ("monkey patching")

		Internal: Implemented method hash to store implementation pointers

		Internal: Fixed inference of arguments on methods with splat arguments

0.0.13	Argument splat method calls (not optimized yet)

		Array arguments on methods (optional arguments, variable number of arguments)
		
		Fixed bug of return when trying to return from a proc (illegal overwrite of memory on stack when trying to flag frame as targetted)

		Internal refactor

0.0.12	Completed exception support (multiple rescue clauses,  multiple exceptions in only one rescue, assign exceptions to variables and fastruby internal exceptions)

0.0.11	Fixed packaging error

0.0.10	retry support (exceptions and blocks)

		redo support
		
		for each support

0.0.9	Proc support

		Enhanced lambda, proc and Proc.new hook by using nodes for method identification at runtime instead of method name

0.0.8	Lambda support

		Re-implemented break
		
		DAG representation of stack

0.0.7	Normalized random class names on specs to maximize the profit of the cache when running specs

		Implemented dump of classes into literals using rb_define_class. This improves the cache loads

		Added fastruby VERSION to cache hash

		Support for class variables

0.0.6	Implemented cache of native libraries to speedup init, see README for more info

0.0.5	Support for case..when..end

		Fixes on wrapping/translation of fastruby frames through ruby calls

0.0.4	Basic support fot non-local goto: return, break, next

		Basic support for exceptions

		Support for defined?

		Support for modules

		Support for singleton methods

0.0.3	Implemented global array to make references to literal objects used in code

		Added support to write and read constants

		Added support to execution of complete ruby code (entire clases o any ruby code)

		Refactored code to avoid use sexp_processor

0.0.2	Added missing sexp_processor dependency

0.0.1	First test release
